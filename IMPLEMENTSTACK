# OPTION 2 - IMPLEMENT STACK
# DO NOT SHARE

# 2. Implement a growable integer stack (without using container libraries like vector, list, etc.)
#    that satisfies the following requirements:

# `push` adds a given value to the top
# `pop`  returns and removes the value at the top
# `peek` returns the value at the top
# `size` returns the count of values

class IntStack:
    """
    Class used to simulate a stack without using a container
    Using a linked list structure to store values
    """
    
    def __init__(self):
        """
        Constructor for IntStack, initializes stack
        """
        self.stack = None
        self.length = 0

    def push(self, value):
        """
        Takes a value and adds it into the stack
        """
        new_node = Node(value)
        
        if self.stack is None:
            self.stack = new_node
        
        else:
            new_node.next = self.stack
            self.stack = new_node
        
        self.length += 1

    def pop(self):
        """
        Removes and returns the top element in the stack
        Throws an error if stack is empty
        """
        if self.length == 0:
            raise ValueError("stack is empty")
        
        temp = self.stack.val
        self.stack = self.stack.next

        self.length -= 1
        return temp
    
    def peek(self):
        """
        Returns the top element in the stack
        Throws an error if stack is empty
        """
        if self.length == 0:
            raise ValueError("stack is empty")
        
        return self.stack.val
    
    def size(self):
        """
        Returns the size of the stack
        """
        return self.length
    

class Node: 
    """
    Helper class to IntStack used to implement linked list structure
    """
    def __init__(self, value):
        """
        Constructorfor Node class, initializes Node value
        """
        self.val = value
        self.next = None
        